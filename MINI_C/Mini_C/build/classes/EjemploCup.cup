/**
 *
 * @author sebastianbonilla
 */

//*---------------------------------DECLARACIONES-----------------------------*/
package lexicalanalyzerphp; 

/*---------------------------------IMPORTACIONES-----------------------------*/
import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;


/*---------------------------------PARSER CODE-----------------------------*/
//Codigo del parser, se copia integramente a la clase final
parser code 
{:
    ArrayList<String> ArrayErrores = new ArrayList<String>();
//Array con los errores para exportar
    public ArrayList getArrayErrors(){
        return ArrayErrores;
    }
    
    public void setArrayErrores(String sError){
        ArrayErrores.add(sError);
    }

//Reporte de errores linea y columna
    public void report_error (String mensaje, Object info){
        StringBuilder messageError = new StringBuilder("Error:<");
        if(info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol SimboloError = ((java_cup.runtime.Symbol) info);
            
            if (SimboloError.right >=0) {
                messageError.append("Linea "+(SimboloError.right+1));
                if (SimboloError.left >=0) {
                    messageError.append(", Columna "+ (SimboloError.left+1));
                    messageError.append(", Simbolo: "+ "'"+SimboloError.value.toString()+ "'");
                }
            }
        }
        messageError.append(", Tipo Error: '"+mensaje+"'>" ) ;
        setArrayErrores(messageError.toString());
        System.err.println(messageError);
    }
//Reporte de erro cuando es un error fatal y no se puede recuperar se despliega el mensaje de error y se finaliza la ejecucion.
    public void report_fatal_error(String mensaje, Object info){
        report_error(mensaje,info);
        System.exit(1);
    }
:};

/*---------------------------------GRAMATICA-----------------------------*/   
terminal          minus,arop, cmpop, logop,ident,pyc,t_int,t_double,t_bool, t_string, bolCnst,strConst,brackets_2,t_void,prnthss_1,prnthss_3,comma,clase,t_implements,t_interface,
                  t_if, t_else,t_for,t_while,t_return,t_break,print,t_this,brackets_1,brackets_3,neg,malloc,readInteger,
                  ReadLine,dot,dblConst,intCnst,t_null,t_newArr,getByte,setByte, equals, curly_1, curly_3, extend, t_new;
   


/* No terminales usados en la seccion gramatical. */
non terminal Object     VariableList, Arlogop, Program, Decl, VariableDecl,FunctionDecl,ClassDecl, DeclStar, InterfaceDecl,Variable,Type,Formals,StmtBlock,Field,
                        ExtendsIdentOptional,ImplementsIdentPlusCommaOptional,Prototype,Stmt,Expr,IfStmt,WhileStmt,ForStmt,BreakStmt,ReturnStmt,PrintStmt,FieldStar,
                        VariableDeclStar,StmtStar,LValue,Constant,Call,Actuals,LibCall,
                         PrototypeStar, ExprOptional, elseStmtOptional, IdentList, ExprList;



precedence left equals;

precedence left arop;
precedence left cmpop;
precedence left logop;
precedence left neg, minus;
precedence left brackets_1, dot;
precedence left prnthss_1;
precedence left t_else;
precedence left ident;


start with Program;



//GRAMATICA   
    Arlogop ::= arop|logop;
    Program ::= Decl DeclStar
    ;
    Decl ::= VariableDecl|
             FunctionDecl|
             ClassDecl|
             InterfaceDecl|
             error pyc|
             error curly_3
    ;
    DeclStar ::= |Decl DeclStar;
    
    VariableDecl ::= Variable pyc
    ;
    Variable ::= Type ident
    ;
    Type ::= t_int|
             t_double|
             t_bool|
             t_string|
             ident|
             Type brackets_2
    ;
    FunctionDecl ::= Type ident	prnthss_1 Formals prnthss_3 StmtBlock|
                    t_void ident prnthss_1 Formals prnthss_3 StmtBlock
    ;
    Formals ::= VariableList|;

    VariableList    ::= Variable|
                        VariableList comma Variable
    ;
    

    ClassDecl ::= clase ident ExtendsIdentOptional ImplementsIdentPlusCommaOptional curly_1 FieldStar curly_3		
    ;
    FieldStar ::= Field FieldStar|
    ;
    ExtendsIdentOptional ::= extend ident |
    ;
    ImplementsIdentPlusCommaOptional ::= t_implements IdentList |
    ;

    IdentList   ::= ident|
                    IdentList comma ident;


    Field::= VariableDecl|
             FunctionDecl
    ;
    InterfaceDecl ::= t_interface ident curly_1 PrototypeStar curly_3
    ;
    PrototypeStar ::= Prototype PrototypeStar|;
    Prototype ::= Type ident prnthss_1 Formals prnthss_3 pyc|
                  t_void ident prnthss_1 Formals prnthss_3 pyc
    ;
    Stmt ::= Expr pyc|
                pyc|
                    IfStmt|
                    WhileStmt|
                    ForStmt|
                    BreakStmt|
                    ReturnStmt|
                    PrintStmt|
                    StmtBlock
    ;
    StmtBlock ::= curly_1 VariableDeclStar StmtStar curly_3
    ;
    IfStmt ::= t_if prnthss_1 Expr prnthss_3 Stmt elseStmtOptional
    ;
    elseStmtOptional    ::= t_else Stmt | ;

    
    VariableDeclStar ::= VariableDecl VariableDeclStar|
    ;
    StmtStar ::= StmtStar Stmt  | 
    ;
    WhileStmt ::= t_while prnthss_1 Expr prnthss_3 Stmt										
    ;
    ForStmt ::= t_for prnthss_1 ExprOptional pyc Expr pyc ExprOptional prnthss_3 Stmt
    ;
    ReturnStmt ::= t_return ExprOptional pyc
    ;
    BreakStmt ::= t_break pyc
    ;
    PrintStmt ::= print prnthss_1 ExprList prnthss_3 pyc
    ;
    
    
    ExprOptional    ::= Expr|;

    Expr ::= LValue equals Expr|
             Constant|
             LValue|
             t_this|
             Call|
             prnthss_1 Expr prnthss_3|
             Expr Arlogop Expr|
             Expr cmpop Expr|
             minus Expr|
             neg Expr|
             t_new prnthss_1 ident prnthss_3|
             t_newArr prnthss_1 Expr comma Type prnthss_3|
             readInteger prnthss_1 prnthss_3|
             ReadLine prnthss_1 prnthss_3|
             malloc prnthss_1 Expr prnthss_3 
    ;
    LValue ::= ident|
               Expr dot ident|
               Expr brackets_1 Expr brackets_3
    ;
    Call ::= ident prnthss_1 Actuals prnthss_3|
             Expr dot ident prnthss_1 Actuals prnthss_3|
             Expr dot LibCall prnthss_1 Actuals prnthss_3
    ;
    LibCall ::= getByte prnthss_1 Expr prnthss_3|
                setByte prnthss_1 Expr comma Expr prnthss_3
    ;
    Actuals ::= ExprList|
    ;

    ExprList    ::= Expr|
                    ExprList comma Expr;

    Constant ::= intCnst|
                 dblConst|
                 bolCnst|
                 strConst|
                 t_null
    ;