/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    scanner s;
    Parser(scanner s){ this.s=s; }
    //Aqui puedo agregar código a mi clase.
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal String    tIdentificador, DoubleConstant, StringConstant, tvvoid, tcclass, tiinterface, tnnull, ttthis, teextends, tiimplements, tffor, twwhile, tiif, teelse, trreturn, tbbreak;
/* Non terminals */
non terminal Object  Program, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, PrintStmt, Expr, LValue, Call, LibCall, Actuals, Constant;
/* Precedences */
precedence left =;         //assignment
precedence left ||;         //logical or
precedence left &&;          //logical and
precedence left ==, !=;       //equality
precedence left <, <=, >, >=;   //relational
precedence left +,-;         //addition, subtraction
precedence left *, /, %;       //multiply, divide, mod
precedence left !, -;       //unary minus, logical not
precedence left [, .;       //array indexing and field selection

/* The grammar rules */
start with Program;

Program       ::=    Decl+

Decl          ::=    VariableDecl | FunctionDecl | ClassDecl | InterfaceDecl

VariableDecl  ::=    Variable ;

Variable      ::=    Type ident

Type          ::=    int | double | bool | string | ident | Type [ ]

FunctionDecl ::=    Type ident ( Formals ) StmtBlock |

void ident ( Formals ) StmtBlock

Formals       ::=    Variable+, | ε

ClassDecl     ::=    class ident < extends ident> <implements ident+,> { Field* }

Field         ::=    VariableDecl | FunctionDecl

InterfaceDecl::=     interface ident { Prototype* }

Prototype     ::=    Type ident ( Formals ) ; | void ident ( Formals ) ;

StmtBlock     ::=    { VariableDecl* Stmt* }

Stmt          ::=    <Expr>; | IfStmt | WhileStmt | ForStmt | BreakStmt |

ReturnStmt | PrintStmt | StmtBlock

IfStmt        ::=    if ( Expr ) Stmt <else Stmt>

WhileStmt     ::=    while ( Expr ) Stmt

ForStmt       ::=    for ( <Expr>; <Expr> ; <Expr> ) Stmt

ReturnStmt    ::=    return <Expr> ;

BreakStmt     ::=    break ;

PrintStmt     ::=    Print ( Expr+, ) ;

Expr          ::=    LValue = Expr | Constant | LValue | this | Call | ( Expr ) |

Expr + Expr | Expr - Expr | Expr * Expr | Expr / Expr |

Expr % Expr | - Expr | Expr < Expr | Expr <= Expr |

Expr > Expr | Expr >= Expr | Expr == Expr | Expr != Expr |

Expr && Expr | Expr || Expr | !Expr | ReadInteger ( ) |

ReadLine ( ) | New ( ident ) | NewArray ( Expr , Type )

LValue        ::=    ident | Expr . ident | Expr [ Expr ]

Call          ::=    ident ( Actuals ) | Expr . ident ( Actuals )

Actuals       ::=    Expr+, | ε

Constant      ::=    intConstant | doubleConstant | boolConstant |

stringConstant | null