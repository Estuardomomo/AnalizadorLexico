/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    scanner s;
    Parser(scanner s){ this.s=s; }
    //Aqui puedo agregar c√≥digo a mi clase.
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal      tIdentificador, tdouble, tstring, tvvoid, tcclass, tiinterface, tnnull, ttthis, teextends, tiimplements, tffor, twwhile, tiif, teelse, trreturn, tbbreak, tNew, tNNewArray, tPPrint, tRReadInteger, tRReadLine, tMMalloc, tGbyte, tSbyte, tComa, tParentesisA, tParentesisC, tLlavesA, tLlavesC, tPuntoyComa, toperadoresAsignacion, plus, tresta, times, div, percentage, smaller, smallerEquals, greater, greaterEquals, equals, notequals, toperadoreslogicos, tnegacion, tPunto, tCorcheteA, tCorcheteC, tiint, tddouble, tbbool, tsstring, tinteger, tboolean;
/* Non terminals */
non terminal Object  Program, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, PrintStmt, Expr, LValue, Call, LibCall, Actuals, Constant;
/* Precedences */
precedence left =;         //assignment
precedence left ||;         //logical or
precedence left &&;          //logical and
precedence left ==, !=;       //equality
precedence left <, <=, >, >=;   //relational
precedence left +,-;         //addition, subtraction
precedence left *, /, %;       //multiply, divide, mod
precedence left !, -;       //unary minus, logical not
precedence left [, .;       //array indexing and field selection

/* The grammar rules */
start with Program;

Program::= Decl Program | Decl;

Decl::=  VariableDecl | FunctionDecl | ClassDecl | InterfaceDecl;

VariableDecl ::= Variable tPuntoyComa ;

Variable ::= Type tIdentificador ;

Type ::= tiint | tddouble | tbbool | tsstring | tIdentificador | Type tCorcheteA tCorcheteC ;

FunctionDecl ::= Type FunctionRightRecursive
| tvvoid FunctionRightRecursive ;